knitr::opts_chunk$set(echo = TRUE)
#install.packages("bnlearn")
#install.packages("pcalg")
library(bnlearn)
library(pcalg)
collision_corr <- read.csv("data_sources/corr.csv", header = TRUE)
# Reading number of row and label names
n <- nrow (collision_corr)
V <- colnames(collision_corr) # labels aka node names
#Estimaing causal graph using PC algorithm
pc.fit <- pc(suffStat = list(C = collision_corr, n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = FALSE)
#Converting pcAlgo type objects to bn type objects.
Estimated = as.bn(pc.fit, check.cycles = FALSE)
#Plotting
if (require(Rgraphviz)) {
# show estimated CPDAG
graphviz.plot(Estimated, main = "Constraint-based Causal Graph")
collision_corr <- read.csv("data_sources/corr.csv", header = TRUE)
# Reading number of row and label names
n <- nrow (collision_corr)
V <- colnames(collision_corr) # labels aka node names
#Estimaing causal graph using PC algorithm
pc.fit <- pc(suffStat = list(C = collision_corr, n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = FALSE)
#Converting pcAlgo type objects to bn type objects.
Estimated = as.bn(pc.fit, check.cycles = FALSE)
#Plotting
if (require(Rgraphviz)) {
# show estimated CPDAG
graphviz.plot(Estimated, main = "Constraint-based Causal Graph")
}
View(collision_corr)
collision_corr <- read.csv("data_sources/corr.csv", header = FALSE)
View(collision_corr)
knitr::opts_chunk$set(echo = TRUE)
cor_asia <- cor(asia, method = c("kendall"))
data(asia) #Icees
# Ground truth network for Asia
asia_dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
# Changing to numerical labels: 1s and 0s
asia[] <- +(asia=="yes")
# Converting into the Correlation Matrices using Kendall's tau statistic to estimate a
# rank-based measure of association.
cor_asia <- cor(asia, method = c("kendall"))
View(cor_asia)
View(collision_corr)
View(collision_corr)
collision_corr <- read.csv("data_sources/corr.csv", header = TRUE)
collision_corr <- read.csv("data_sources/corr.csv", header = TRUE, row.names = 1, sep = ",")
# Reading number of row and label names
n <- nrow (collision_corr)
V <- colnames(collision_corr) # labels aka node names
#Estimaing causal graph using PC algorithm
pc.fit <- pc(suffStat = list(C = collision_corr, n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = FALSE)
#Converting pcAlgo type objects to bn type objects.
Estimated = as.bn(pc.fit, check.cycles = FALSE)
#Plotting
if (require(Rgraphviz)) {
# show estimated CPDAG
graphviz.plot(Estimated, main = "Constraint-based Causal Graph")
}
# Reading number of row and label names
n <- nrow (collision_corr)
V <- colnames(collision_corr) # labels aka node names
#Estimaing causal graph using PC algorithm
pc.fit <- pc(suffStat = list(C = collision_corr, n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.05, labels = V, verbose = FALSE)
#Converting pcAlgo type objects to bn type objects.
Estimated = as.bn(pc.fit, check.cycles = FALSE)
#Plotting
if (require(Rgraphviz)) {
# show estimated CPDAG
graphviz.plot(Estimated, main = "Constraint-based Causal Graph")
}
#Estimaing causal graph using PC algorithm
pc.fit <- pc(suffStat = list(C = collision_corr, n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.005, labels = V, verbose = FALSE)
#Converting pcAlgo type objects to bn type objects.
Estimated = as.bn(pc.fit, check.cycles = FALSE)
#Plotting
if (require(Rgraphviz)) {
# show estimated CPDAG
graphviz.plot(Estimated, main = "Constraint-based Causal Graph")
}
pc.fit <- pc(suffStat = list(C = collision_corr, n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.05, labels = V, verbose = FALSE)
#Converting pcAlgo type objects to bn type objects.
Estimated = as.bn(pc.fit, check.cycles = FALSE)
#Plotting
if (require(Rgraphviz)) {
# show estimated CPDAG
graphviz.plot(Estimated, main = "Constraint-based Causal Graph")
}
getwd
getwd()
knitr::opts_chunk$set(echo = TRUE)
collision_corr <- read.csv("data_sources/corr.csv", header = TRUE, row.names = 1, sep = ",")
getwd()
